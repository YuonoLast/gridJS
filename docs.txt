Version 1.1
В функцию grid() передаем объект:
{
    gridElements: ['gridArea', 'rowArea','cardArea'],
    quantityCardsInRow: [1, 1, 2, 2, 3, 3],
    rowsClasses: ['row-1', 'row-1', 'row-2', 'row-2', 'row-3', 'row-3'],
    rowsFillerClasses: ['filler', 'filler', 'filler', 'filler', 'filler filler-cards-3', 'filler filler-cards-3'],
    activeFillerFunction: true
}


1.
gridElements: [
   Первый элемент - это обертка сетки в которой лежат строки,
   Второй элемент - это строки в которых лежат карточки,
   Третий элемент - это карточки(в них естественно лежит тот контент который нужен вам)
]
*Все классы передаем без точки.
*Задавать классы можно любые это мой пример настройки.
*Эти классы не должны иметь стилей они служат лишь для обращения к элементу не более.
*Это структура моей сетки которая не будет работать если ее не соблюдать.


2.
quantityCardsInRow: [
   1, 2, 2, 3, 3, 4
]
*Количество карт в строке устанавливается на определенных отрезках, 
которые я именую как брэкпоинты, ширины от widthN1 до widthN2.


3.
rowsClasses: ['row-1', 'row-2', 'row-2', 'row-3', 'row-3', 'row-4']
*Классы котрые задаются строкам с количеством карт прописанном в quantityCardsInRow, 
эти классы должны иметь стили прописанные в css и идти 
в соответствии с порядком элементов в quantityCardsInRow.
То есть они применяются когда строка содержит в себе какое-то количество карт



const widthsBreakpointsObject = {
    width0: 320,
    width1: 550,
    width2: 768,
    width3: 1024,
    width4: 1440,
    width5: 2000,
    width6: 2561,
}
*Алгоритм вычисляет отрезки в промежутке которых будет работать определенный стэк правил;
*Допустим в нашем примере от 320 до 550 - это первый отрезок к нему применятся правила 
quantityCardsInRow[0] - 1
rowsClasses[0] - 'row-1'
Одна карточка в строке
(на самом деле алгоритм видя цифру 1 применяет значение allCards - все карточки для количества карт в строке
допустим если у нас всего 8 карт при значении 1 у нас добавится одна строка и в нее будут добавленны все карты
это сделанно для того чтобы не плодить n-ое количество строк. Так что если вы хотите в одну строку и чтобы в ней лежали все карточки
смело передавайте 1) 
и класс для строки который добавится этой строке. 
*Эти брэкпоинты статичны и не меняются;


4. Filler's
То ради чего если честно я и начал писать эту библиотеку.
Филлеры это всего лишь карточки заполнители, служащие для того чтобы заполнять некрасивые пустоты вызванные flex'ами.

rowsFillerClasses: ['filler', 'filler', 'filler', 'filler', 'filler filler-cards-3', 'filler filler-cards-3'],
activeFillerFunction: true

Первый массив - набор классов.
Вы наверное заметили что в 4 и 5 элементах не один класс филлер, а сразу два.
Первый класс filler - служит для обращения к филлеру(можете называть его как хотите), второй класс должен быть описан в css чтобы 
правильно заполнить предполагаемый некрасивый участок строки. В первых четырех элементах нету класса со стилями потому что он просто не нужен в данном примере.
activeFillerFunction - принимакет в себя булево значение и отвечает за активацию или деактивацию данной фичи.

Version 1.1
Version:patch - 1.1.01
Пофиксил консольку, которую забыл убрать после отладки)